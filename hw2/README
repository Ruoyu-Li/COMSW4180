Ruoyu; rl2929

The certificate is generated by prime256v1 algorithm.
All files in the command line should be relative path.

1. Create server certificate:
openssl ecparam -genkey -name prime256v1 -out [key_name].pem
openssl req -new -sha256 -key [key_name].pem -out [csr_name].csr
openssl req -x509 -sha256 -days 365 -key [key_name].pem -in [csr_name].csr -out [cert_name].pem

In the submission, server_cert.pem is a server certificate; server_key is a server private key.


2. Create client certificate:
openssl ecparam -genkey -name prime256v1 -out [key_name].pem
openssl req -new -sha256 -key [key_name].pem -out [csr_name].csr
openssl req -x509 -sha256 -days 365 -key [key_name].pem -in [csr_name].csr -out [cert_name].pem

In the submission, client_cert.pem is a client certificate; client_key is a client private key.


3. Place certificates, keys and scripts:
Place server_cert.pem and server_key.pem in server with its script server.py, and place client_cert.pem and client_key.pem in client with its script client.py.


4. Install server certificate on client:
If you use the certificates and key in the submission, place server_cert.pem in client in the same directory of client.py, and place client_cert.pem in server in the same directory of server.py.

If you generate certificates by yourself, do as follows:
a. In server terminal, use command line:
	cat [cert_name].pem
copy the string in terminal and use command line in client terminal:
	vi [cert_name].pem
and paste the string and save it in the same directory of client.py


5. Install client certificate on server:
Similar to step 4


6. run scripts
In server, use command line:
	python3 server.py [port] [server_certificate] [server_key] [ca_certificate]

In client, use command line:
	python3 client.py [filename] [ip] [port] [client_certificate] [client_key] [ca_certificate]





